/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,15],$V1=[1,22],$V2=[1,17],$V3=[1,19],$V4=[1,23],$V5=[1,20],$V6=[1,21],$V7=[1,18],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[2,5,9,22,26,52,55,58,59,61,62,63,64,65,66],$Ve=[1,42],$Vf=[1,43],$Vg=[1,44],$Vh=[1,41],$Vi=[1,39],$Vj=[1,40],$Vk=[1,49],$Vl=[25,26,29],$Vm=[2,22],$Vn=[1,52],$Vo=[9,11,23,25,37,67,68,69,70,71,72,73,74,75,76,77,78,79],$Vp=[1,68],$Vq=[1,70],$Vr=[1,67],$Vs=[1,81],$Vt=[1,82],$Vu=[1,76],$Vv=[1,77],$Vw=[1,80],$Vx=[1,78],$Vy=[1,79],$Vz=[1,66],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,74],$VE=[1,75],$VF=[1,103],$VG=[9,37,67],$VH=[1,112],$VI=[1,113],$VJ=[1,104],$VK=[1,105],$VL=[1,106],$VM=[1,107],$VN=[1,108],$VO=[1,109],$VP=[1,110],$VQ=[1,111],$VR=[1,114],$VS=[1,115],$VT=[1,116],$VU=[1,117],$VV=[2,5,9,22,26,52,54,55,58,59,61,62,63,64,65,66],$VW=[1,142],$VX=[2,5,9,22,26,31,36,39,41,43,45,47,49,51,52,55,58,59,61,62,63,64,65,66,69,80,81,82,83,84],$VY=[37,67],$VZ=[9,11,23,25,37,67,68,69,73,74,75,76,77,78,79],$V_=[9,11,37,67,73,74,75,78,79],$V$=[9,11,23,25,37,67,73,74,75,76,77,78,79];

    let Raiz                        =   require("../Entorno/Raiz").Raiz;
    let Tipo                        =   require("../Entorno/Simbolos/Tipo").Tipo;
    let TipoPrimitivo               =   require("../Entorno/Simbolos/TipoPrimitivo").TipoPrimitivo;
    let DeclararVariable            =   require("../Instrucciones/DeclararVariable").DeclararVariable; 
    let DeclararFuncion             =   require("../Instrucciones/DeclararFuncion").DeclararFuncion;
    let Asignacion                  =   require("../Instrucciones/Asignacion").Asignacion;
    let If                          =   require("../Instrucciones/If").If;
    let Parametro                   =   require("../Instrucciones/Parametro").Parametro;
    let AccesoVariable              =   require("../Expresiones/AccesoVariable").AccesoVariable;
    let LlamadaFuncion              =   require("../Expresiones/LlamadaFuncion").LlamadaFuncion;
    let OperacionAritmetica         =   require("../Expresiones/OperacionAritmetica").OperacionAritmetica;
    let OperacionLogica             =   require("../Expresiones/OperacionLogica").OperacionLogica;
    let OperacionRelacional         =   require("../Expresiones/OperacionRelacional").OperacionRelacional;
    let For                       =   require("../Instrucciones/For").For;
    let While                       =   require("../Instrucciones/While").While;
    let DoWhile                     =   require("../Instrucciones/DoWhile").DoWhile;
    let Valor                       =   require("../Expresiones/Valor").Valor;
    let toLower                     =   require("../Instrucciones/toLower").toLower;
    let toString                    =   require("../Instrucciones/toString").toString;
    let toUpper                     =   require("../Instrucciones/toUpper").toUpper;
    let Length                      =   require("../Instrucciones/Length").Length;
    let TypeOf                      =   require("../Instrucciones/TypeOf").TypeOf;
    let DeclararVector              =   require("../Instrucciones/DeclararVector").DeclararVector;
    let DeclararLista               =   require("../Instrucciones/DeclararLista").DeclararLista;
    let Inc_dec                     =   require("../Instrucciones/Incremento_decremento").Incremento_decremento;
    let Truncate                    =   require("../Instrucciones/Truncate").Truncate;
    let Round                    =   require("../Instrucciones/Round").Round;
    let Err                         =   require("../Data/Errores").Err;

export class ParserParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new ParserLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"INCREMENTO_DECREMENTO":12,"FUNCION":13,"IF":14,"LLAMADA_FUNCION":15,"WHILE":16,"DO":17,"VECTOR":18,"LISTA":19,"FOR":20,"ASIGNACION":21,"tlist":22,"<":23,"TIPO":24,">":25,"id":26,"=":27,"tnew":28,"[":29,"]":30,"entero":31,"LISTA_EXP":32,"EXP":33,".":34,"tadd":35,"(":36,")":37,"TRUNCATE":38,"ttruncate":39,"ROUND":40,"tround":41,"TOLOWER":42,"ttolower":43,"TOUPPER":44,"ttoupper":45,"TOSTRING":46,"ttoString":47,"LENGTH":48,"ttlength":49,"TYPEOF":50,"tttypeof":51,"tif":52,"ELSE":53,"telse":54,"tfor":55,"++":56,"--":57,"twhile":58,"tdo":59,"LISTA_PARAM":60,"tvoid":61,"tinteger":62,"tboolean":63,"tstring":64,"tchar":65,"tdouble":66,",":67,"+":68,"-":69,"*":70,"/":71,"%":72,"^":73,"==":74,"!=":75,"<=":76,">=":77,"&&":78,"||":79,"decimal":80,"caracter":81,"cadena":82,"ttrue":83,"tfalse":84,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:"{",9:"}",11:";",22:"tlist",23:"<",25:">",26:"id",27:"=",28:"tnew",29:"[",30:"]",31:"entero",34:".",35:"tadd",36:"(",37:")",39:"ttruncate",41:"tround",43:"ttolower",45:"ttoupper",47:"ttoString",49:"ttlength",51:"tttypeof",52:"tif",54:"telse",55:"tfor",56:"++",57:"--",58:"twhile",59:"tdo",61:"tvoid",62:"tinteger",63:"tboolean",64:"tstring",65:"tchar",66:"tdouble",67:",",68:"+",69:"-",70:"*",71:"/",72:"%",73:"^",74:"==",75:"!=",76:"<=",77:">=",78:"&&",79:"||",80:"decimal",81:"caracter",82:"cadena",83:"ttrue",84:"tfalse"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[19,11],[18,10],[18,8],[10,4],[10,2],[21,4],[21,7],[21,7],[38,4],[40,4],[42,4],[44,4],[46,4],[48,4],[50,4],[14,5],[14,6],[53,2],[53,2],[20,9],[20,9],[20,10],[20,10],[16,5],[17,6],[13,6],[13,6],[13,5],[13,5],[24,1],[24,1],[24,1],[24,1],[24,1],[60,4],[60,2],[32,3],[32,1],[15,4],[15,3],[12,2],[12,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,4],[33,6],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1]];
    table: Array<StateType> = [{2:$V0,3:1,4:2,6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V1,24:16,26:$V2,52:$V3,55:$V4,58:$V5,59:$V6,61:$V7,62:$V8,63:$V9,64:$Va,65:$Vb,66:$Vc},{1:[3]},{2:$V0,5:[1,29],6:30,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V1,24:16,26:$V2,52:$V3,55:$V4,58:$V5,59:$V6,61:$V7,62:$V8,63:$V9,64:$Va,65:$Vb,66:$Vc},o($Vd,[2,3]),{11:[1,31]},{11:[1,32]},o($Vd,[2,8]),o($Vd,[2,9]),{11:[1,33]},o($Vd,[2,11]),{11:[1,34]},{11:[1,35]},{11:[1,36]},o($Vd,[2,15]),o($Vd,[2,16]),o($Vd,[2,17]),{26:[1,37],29:[1,38]},{27:$Ve,29:$Vf,34:$Vg,36:$Vh,56:$Vi,57:$Vj},{26:[1,45]},{36:[1,46]},{36:[1,47]},{7:48,8:$Vk},{23:[1,50]},{36:[1,51]},o($Vl,[2,47]),o($Vl,[2,48]),o($Vl,[2,49]),o($Vl,[2,50]),o($Vl,[2,51]),{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,10]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),{11:$Vm,27:$Vn,36:[1,53]},{30:[1,54]},o($Vo,[2,58]),o($Vo,[2,59]),{12:63,15:69,26:$Vp,31:$Vq,32:55,33:57,36:$Vr,37:[1,56],38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:83,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{31:[1,84]},{35:[1,85]},{36:[1,86]},{12:63,15:69,26:$Vp,31:$Vq,33:87,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:88,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{58:[1,89]},{2:$V0,4:90,6:3,9:[1,91],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V1,24:16,26:$V2,52:$V3,55:$V4,58:$V5,59:$V6,61:$V7,62:$V8,63:$V9,64:$Va,65:$Vb,66:$Vc},{24:92,62:$V8,63:$V9,64:$Va,65:$Vb,66:$Vc},{10:94,21:93,24:96,26:[1,95],62:$V8,63:$V9,64:$Va,65:$Vb,66:$Vc},{12:63,15:69,26:$Vp,31:$Vq,33:97,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{24:100,37:[1,99],60:98,62:$V8,63:$V9,64:$Va,65:$Vb,66:$Vc},{26:[1,101]},{37:[1,102],67:$VF},o($Vo,[2,57]),o($VG,[2,55],{23:$VH,25:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU}),o($Vo,[2,66]),o($Vo,[2,67]),o($Vo,[2,68]),o($Vo,[2,69]),o($Vo,[2,70]),o($Vo,[2,71]),o($Vo,[2,72]),o($Vo,[2,73]),{12:63,15:69,26:$Vp,31:$Vq,33:118,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:119,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},o($Vo,[2,86],{29:[1,120],36:$Vh,56:$Vi,57:$Vj}),o($Vo,[2,87]),o($Vo,[2,88]),o($Vo,[2,89]),o($Vo,[2,90]),o($Vo,[2,91]),o($Vo,[2,92]),o($Vo,[2,93]),{36:[1,121]},{36:[1,122]},{36:[1,123]},{36:[1,124]},{36:[1,125]},{36:[1,126]},{36:[1,127]},{11:[1,128],23:$VH,25:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{30:[1,129]},{36:[1,130]},{24:100,37:[1,132],60:131,62:$V8,63:$V9,64:$Va,65:$Vb,66:$Vc},{23:$VH,25:$VI,37:[1,133],68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{23:$VH,25:$VI,37:[1,134],68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{36:[1,135]},{2:$V0,6:30,9:[1,136],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V1,24:16,26:$V2,52:$V3,55:$V4,58:$V5,59:$V6,61:$V7,62:$V8,63:$V9,64:$Va,65:$Vb,66:$Vc},o($VV,[2,5]),{25:[1,137]},{12:63,15:69,26:$Vp,31:$Vq,33:138,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{11:[1,139]},{27:$Ve,29:$Vf,34:$Vg},{26:[1,140]},{11:[2,21],23:$VH,25:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{37:[1,141],67:$VW},{7:143,8:$Vk},{26:[1,144]},{27:[1,145]},o($Vo,[2,56]),{12:63,15:69,26:$Vp,31:$Vq,33:146,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:147,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:148,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:149,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:150,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:151,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:152,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:153,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:154,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:155,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:156,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:157,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:158,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:159,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:160,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},o($Vo,[2,74]),{23:$VH,25:$VI,37:[1,161],68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{29:[1,163],31:[1,162]},{12:63,15:69,26:$Vp,31:$Vq,33:164,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:165,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:166,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:167,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:168,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:169,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{12:63,15:69,26:$Vp,31:$Vq,33:170,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},o($VX,[2,23]),{27:[1,171]},{12:63,15:69,26:$Vp,31:$Vq,33:172,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{37:[1,173],67:$VW},{7:174,8:$Vk},{7:175,8:$Vk},{7:176,8:$Vk},{12:63,15:69,26:$Vp,31:$Vq,33:177,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},o($VV,[2,4]),{26:[1,178]},{11:[1,179],23:$VH,25:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{12:63,15:69,26:$Vp,31:$Vq,33:180,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{11:$Vm,27:$Vn},{7:181,8:$Vk},{24:182,62:$V8,63:$V9,64:$Va,65:$Vb,66:$Vc},o($Vd,[2,45]),o($VY,[2,53]),{8:[1,184],28:[1,183]},o($VG,[2,54],{23:$VH,25:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU}),o($VZ,[2,60],{70:$VL,71:$VM,72:$VN}),o($VZ,[2,61],{70:$VL,71:$VM,72:$VN}),o($Vo,[2,62]),o($Vo,[2,63]),o($Vo,[2,64]),o([9,11,37,67,73],[2,65],{23:$VH,25:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU}),o($V_,[2,76],{23:$VH,25:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,76:$VR,77:$VS}),o($V_,[2,77],{23:$VH,25:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,76:$VR,77:$VS}),o($V$,[2,78],{68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN}),o($V$,[2,79],{68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN}),o($V$,[2,80],{68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN}),o($V$,[2,81],{68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN}),o([9,11,37,67,73,78,79],[2,82],{23:$VH,25:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,74:$VP,75:$VQ,76:$VR,77:$VS}),o([9,11,37,67,73,79],[2,83],{23:$VH,25:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT}),o($Vo,[2,75]),{30:[1,185]},{31:[1,186]},{23:$VH,25:$VI,37:[1,187],68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{23:$VH,25:$VI,37:[1,188],68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{23:$VH,25:$VI,37:[1,189],68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{23:$VH,25:$VI,37:[1,190],68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{23:$VH,25:$VI,37:[1,191],68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{23:$VH,25:$VI,37:[1,192],68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{23:$VH,25:$VI,37:[1,193],68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{12:63,15:69,26:$Vp,31:$Vq,33:194,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},{23:$VH,25:$VI,37:[1,195],68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{7:196,8:$Vk},o($Vd,[2,46]),o($Vd,[2,33],{53:197,54:[1,198]}),o($Vd,[2,41]),{23:$VH,25:$VI,37:[1,199],68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{27:[1,200]},{26:[1,201]},{11:[1,202],23:$VH,25:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},o($Vd,[2,43]),{26:[1,203]},{24:204,62:$V8,63:$V9,64:$Va,65:$Vb,66:$Vc},{12:63,15:69,26:$Vp,31:$Vq,32:205,33:57,36:$Vr,38:64,39:$Vs,40:65,41:$Vt,42:58,43:$Vu,44:59,45:$Vv,46:62,47:$Vw,48:60,49:$Vx,50:61,51:$Vy,69:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE},o($Vo,[2,84]),{30:[1,206]},o($Vo,[2,28]),o($Vo,[2,29]),o($Vo,[2,31]),o($Vo,[2,32]),o($Vo,[2,30]),o($Vo,[2,26]),o($Vo,[2,27]),{11:[1,207],23:$VH,25:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU},{11:[1,208]},o($Vd,[2,44]),o($Vd,[2,34]),{7:210,8:$Vk,14:209,52:$V3},{11:[2,42]},{28:[1,211]},{56:[1,212],57:[1,213]},{26:[1,214]},o($VY,[2,52]),{29:[1,215]},{9:[1,216],67:$VF},{30:[1,217]},o($VX,[2,24]),o($VX,[2,25]),o($Vd,[2,35]),o($Vd,[2,36]),{22:[1,218]},{37:[1,219]},{37:[1,220]},{56:[1,222],57:[1,221]},{31:[1,223]},{11:[2,20]},o($Vo,[2,85]),{23:[1,224]},{7:225,8:$Vk},{7:226,8:$Vk},{37:[1,227]},{37:[1,228]},{30:[1,229]},{24:230,62:$V8,63:$V9,64:$Va,65:$Vb,66:$Vc},o($Vd,[2,37]),o($Vd,[2,38]),{7:231,8:$Vk},{7:232,8:$Vk},{11:[2,19]},{25:[1,233]},o($Vd,[2,39]),o($Vd,[2,40]),{11:[2,18]}];
    defaultActions: {[key:number]: any} = {29:[2,1],199:[2,42],216:[2,20],229:[2,19],233:[2,18]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

        console.log("Parse de Jison entrada: OK ");
        let raiz = new Raiz($$[$0-1]);
        this.$ = raiz;
        return raiz;
    
break;
case 2:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 3:

                let lstsent = [];
                lstsent.push($$[$0]);
                this.$ = lstsent;
            
break;
case 4:

                       this.$ = $$[$0-1];
                
break;
case 5:

                        this.$ = [];
                
break;
case 6: case 7: case 10: case 12: case 13: case 14:
 this.$ = $$[$0-1]; 
break;
case 8: case 9: case 11: case 15: case 16: case 87:
 this.$ = $$[$0]; 
break;
case 17:
  Err.agregarALista("Error de analisis: "+yytext,"syntax error",this._$.first_line,this._$.first_column) ;
                
break;
case 18:

                let lista = [];
                this.$ = new DeclararLista($$[$0-8],$$[$0-6],$$[$0-1],0,lista,true,_$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 19:

                let vector = [];
                this.$ = new DeclararVector($$[$0-9],$$[$0-6],$$[$0-3],$$[$0-1],vector,true,_$[$0-6].first_line, _$[$0-6].first_column);
                
            
break;
case 20:

                this.$ = new DeclararVector($$[$0-7],$$[$0-4],$$[$0-7],$$[$0-1].length,$$[$0-1],false,_$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 21:

                this.$ = new DeclararVariable($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 22:

                this.$ = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column);
            
break;
case 23:

                this.$ = new Asignacion($$[$0-3], $$[$0-1], 0, false, false, _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 24:

                this.$ = new Asignacion($$[$0-6], $$[$0-1], $$[$0-4], true, _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 25:

                this.$ = new Asignacion($$[$0-6], $$[$0-2], 0, false, true, _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 26:

            this.$ = new Truncate($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 27:

            this.$ = new Round($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 28:

            this.$ = new toLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 29:

            this.$ = new toUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 30:

            this.$ = new toString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 31:

            this.$ = new Length ($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 32:

            this.$ = new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 33:

            this.$ = new If($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 34:

            this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 35:

            let else_sent = [];
            else_sent.push($$[$0]);
            this.$ = else_sent;
        
break;
case 36:

            this.$ = $$[$0];
        
break;
case 37: case 38:

            this.$ = new For($$[$0-3], $$[$0-5], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
        
break;
case 39:

             this.$ = new For($$[$0-3], $$[$0-5], $$[$0-2], $$[$0], _$[$0-9].first_line, _$[$0-9].first_column );
        
break;
case 40:

             this.$ = new For($$[$0-3], $$[$0-5],$$[$0-2],$$[$0], _$[$0-9].first_line, _$[$0-9].first_column );
        
break;
case 41:

            this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
        
break;
case 42:

            this.$ = new DoWhile($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column );
        
break;
case 43:

                this.$ = new DeclararFuncion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 44:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 45:

                this.$ = new DeclararFuncion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 46:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 47:
 this.$ = new Tipo(TipoPrimitivo.Integer); 
break;
case 48:
 this.$ = new Tipo(TipoPrimitivo.Boolean); 
break;
case 49:
 this.$ = new Tipo(TipoPrimitivo.String);  
break;
case 50:
 this.$ = new Tipo(TipoPrimitivo.Char);    
break;
case 51:
 this.$ = new Tipo(TipoPrimitivo.Double);  
break;
case 52:

                $$[$0-3].push( new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-3].first_line, _$[$0-3].first_column) );
                this.$ = $$[$0-3];
            
break;
case 53:

                let decla1 = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
                let params = [];
                params.push(decla1);
                this.$ = params;
            
break;
case 54:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 55:
 
            let lista_exp = [];
            lista_exp.push($$[$0]);
            this.$ = lista_exp;
        
break;
case 56:
 
                    this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
                
break;
case 57:

                    this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
                
break;
case 58:

                        this.$ = new Inc_dec($$[$0-1],$$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
                     
break;
case 59:

                        this.$ = new Inc_dec($$[$0-1],$$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
                    
break;
case 60: case 61: case 62: case 63: case 64: case 65:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73:
 this.$ = $$[$0];
break;
case 74:
 this.$ = new OperacionAritmetica(new Valor(0, "integer", _$[$0-1].first_line, _$[$0-1].first_column), $$[$0-1], $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 75:
 this.$ = $$[$0-1];
break;
case 76: case 77: case 78: case 79: case 80: case 81:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 82: case 83:
 this.$ = new OperacionLogica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 84:
 this.$ = new AccesoVariable($$[$0-3],$$[$0-1], true, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 85:
 this.$ = new AccesoVariable($$[$0-5],$$[$0-2], true, _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 86:
 this.$ = new AccesoVariable($$[$0],0, false, _$[$0].first_line, _$[$0].first_column);
break;
case 88:
 this.$ = new Valor($$[$0], "integer", new Tipo(TipoPrimitivo.Integer), _$[$0].first_line, _$[$0].first_column);
break;
case 89:
 this.$ = new Valor($$[$0], "double", new Tipo(TipoPrimitivo.Double), _$[$0].first_line, _$[$0].first_column); 
break;
case 90:
 this.$ = new Valor($$[$0], "char", this.$ = new Tipo(TipoPrimitivo.Char), _$[$0].first_line, _$[$0].first_column);   
break;
case 91:
 this.$ = new Valor($$[$0], "string", this.$ = new Tipo(TipoPrimitivo.String), _$[$0].first_line, _$[$0].first_column); 
break;
case 92:
 this.$ = new Valor($$[$0], "true", this.$ = new Tipo(TipoPrimitivo.Boolean), _$[$0].first_line, _$[$0].first_column);   
break;
case 93:
 this.$ = new Valor($$[$0], "false", this.$ = new Tipo(TipoPrimitivo.Boolean), _$[$0].first_line, _$[$0].first_column);  
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */

export class ParserLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Parser"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:$)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:String\b)/i,/^(?:char\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:toString\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:return 5;
      break;
    case 2:/* IGNORE */
      break;
    case 3:/* IGNORE */
      break;
    case 4:   return 83;     
      break;
    case 5:   return 84;    
      break;
    case 6:   return 62;  
      break;
    case 7:   return 63;  
      break;
    case 8:   return 66;   
      break;
    case 9:   return 64;   
      break;
    case 10:   return 65;     
      break;
    case 11:   return 52;       
      break;
    case 12:   return 58;    
      break;
    case 13:   return 59;       
      break;
    case 14:   return 54;     
      break;
    case 15:   return 61;     
      break;
    case 16:   return 'treturn';   
      break;
    case 17:   return 43;  
      break;
    case 18:   return 45;  
      break;
    case 19:   return 47; 
      break;
    case 20:   return 49;  
      break;
    case 21:   return 51;  
      break;
    case 22:   return 55;      
      break;
    case 23:   return 28;      
      break;
    case 24:   return 22;     
      break;
    case 25:   return 35;      
      break;
    case 26:   return 39; 
      break;
    case 27:   return 41;    
      break;
    case 28:yy_.yytext = yy_.yytext.toLowerCase();          return 26;
      break;
    case 29:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 82;
      break;
    case 30:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 81
      break;
    case 31:return 80
      break;
    case 32:return 31
      break;
    case 33:return '$'
      break;
    case 34:return 56;
      break;
    case 35:return 57;
      break;
    case 36:return 68;
      break;
    case 37:return 69;
      break;
    case 38:return 70;
      break;
    case 39:return 71;
      break;
    case 40:return 72;
      break;
    case 41:return 73;
      break;
    case 42:return 36;
      break;
    case 43:return 37;
      break;
    case 44:return 74;
      break;
    case 45:return 27;
      break;
    case 46:return 67;
      break;
    case 47:return ':';
      break;
    case 48:return 11;
      break;
    case 49:return 79;
      break;
    case 50:return 78;
      break;
    case 51:return 75;
      break;
    case 52:return '!';
      break;
    case 53:return 76;
      break;
    case 54:return 77;
      break;
    case 55:return 25;
      break;
    case 56:return 23;
      break;
    case 57:return 8;
      break;
    case 58:return 9;
      break;
    case 59:return 29;
      break;
    case 60:return 30;
      break;
    case 61:return 34;
      break;
    case 62:
    {
        Err.agregarALista("Carácter desconocido: "+yy_.yytext," error léxico",yy_.yylloc.first_line,yy_.yylloc.first_column);
    }

      break;
        }
    }
}

