/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,15],$V1=[1,22],$V2=[1,17],$V3=[1,19],$V4=[1,23],$V5=[1,20],$V6=[1,21],$V7=[1,18],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[2,5,9,22,26,48,51,54,55,57,58,59,60,61,62],$Ve=[1,42],$Vf=[1,43],$Vg=[1,44],$Vh=[1,41],$Vi=[1,39],$Vj=[1,40],$Vk=[1,49],$Vl=[25,26,29],$Vm=[2,22],$Vn=[1,52],$Vo=[9,11,23,25,37,63,64,65,66,67,68,69,70,71,72,73,74,75],$Vp=[1,66],$Vq=[1,68],$Vr=[1,65],$Vs=[1,74],$Vt=[1,75],$Vu=[1,78],$Vv=[1,76],$Vw=[1,77],$Vx=[1,64],$Vy=[1,69],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,99],$VE=[9,37,63],$VF=[1,108],$VG=[1,109],$VH=[1,100],$VI=[1,101],$VJ=[1,102],$VK=[1,103],$VL=[1,104],$VM=[1,105],$VN=[1,106],$VO=[1,107],$VP=[1,110],$VQ=[1,111],$VR=[1,112],$VS=[1,113],$VT=[2,5,9,22,26,48,50,51,54,55,57,58,59,60,61,62],$VU=[1,136],$VV=[2,5,9,22,26,31,36,39,41,43,45,47,48,51,54,55,57,58,59,60,61,62,65,76,77,78,79,80],$VW=[37,63],$VX=[9,11,23,25,37,63,64,65,69,70,71,72,73,74,75],$VY=[9,11,37,63,69,70,71,74,75],$VZ=[9,11,23,25,37,63,69,70,71,72,73,74,75];

    let Raiz                        =   require("../Entorno/Raiz").Raiz;
    let Tipo                        =   require("../Entorno/Simbolos/Tipo").Tipo;
    let TipoPrimitivo               =   require("../Entorno/Simbolos/TipoPrimitivo").TipoPrimitivo;
    let DeclararVariable            =   require("../Instrucciones/DeclararVariable").DeclararVariable; 
    let DeclararFuncion             =   require("../Instrucciones/DeclararFuncion").DeclararFuncion;
    let Asignacion                  =   require("../Instrucciones/Asignacion").Asignacion;
    let If                          =   require("../Instrucciones/If").If;
    let Parametro                   =   require("../Instrucciones/Parametro").Parametro;
    let AccesoVariable              =   require("../Expresiones/AccesoVariable").AccesoVariable;
    let LlamadaFuncion              =   require("../Expresiones/LlamadaFuncion").LlamadaFuncion;
    let OperacionAritmetica         =   require("../Expresiones/OperacionAritmetica").OperacionAritmetica;
    let OperacionLogica             =   require("../Expresiones/OperacionLogica").OperacionLogica;
    let OperacionRelacional         =   require("../Expresiones/OperacionRelacional").OperacionRelacional;
    let For                       =   require("../Instrucciones/For").For;
    let While                       =   require("../Instrucciones/While").While;
    let DoWhile                     =   require("../Instrucciones/DoWhile").DoWhile;
    let Valor                       =   require("../Expresiones/Valor").Valor;
    let toLower                     =   require("../Instrucciones/toLower").toLower;
    let toString                    =   require("../Instrucciones/toString").toString;
    let toUpper                     =   require("../Instrucciones/toUpper").toUpper;
    let Length                      =   require("../Instrucciones/Length").Length;
    let TypeOf                      =   require("../Instrucciones/TypeOf").TypeOf;
    let DeclararVector              =   require("../Instrucciones/DeclararVector").DeclararVector;
    let DeclararLista               =   require("../Instrucciones/DeclararLista").DeclararLista;
    let Inc_dec                     =   require("../Instrucciones/Incremento_decremento").Incremento_decremento;
    let Err                         =   require("../Data/Errores").Err;


export class ParserParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new ParserLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"INCREMENTO_DECREMENTO":12,"FUNCION":13,"IF":14,"LLAMADA_FUNCION":15,"WHILE":16,"DO":17,"VECTOR":18,"LISTA":19,"FOR":20,"ASIGNACION":21,"tlist":22,"<":23,"TIPO":24,">":25,"id":26,"=":27,"tnew":28,"[":29,"]":30,"entero":31,"LISTA_EXP":32,"EXP":33,".":34,"tadd":35,"(":36,")":37,"TOLOWER":38,"ttolower":39,"TOUPPER":40,"ttoupper":41,"TOSTRING":42,"ttoString":43,"LENGTH":44,"ttlength":45,"TYPEOF":46,"tttypeof":47,"tif":48,"ELSE":49,"telse":50,"tfor":51,"++":52,"--":53,"twhile":54,"tdo":55,"LISTA_PARAM":56,"tvoid":57,"tinteger":58,"tboolean":59,"tstring":60,"tchar":61,"tdouble":62,",":63,"+":64,"-":65,"*":66,"/":67,"%":68,"^":69,"==":70,"!=":71,"<=":72,">=":73,"&&":74,"||":75,"decimal":76,"caracter":77,"cadena":78,"ttrue":79,"tfalse":80,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:"{",9:"}",11:";",22:"tlist",23:"<",25:">",26:"id",27:"=",28:"tnew",29:"[",30:"]",31:"entero",34:".",35:"tadd",36:"(",37:")",39:"ttolower",41:"ttoupper",43:"ttoString",45:"ttlength",47:"tttypeof",48:"tif",50:"telse",51:"tfor",52:"++",53:"--",54:"twhile",55:"tdo",57:"tvoid",58:"tinteger",59:"tboolean",60:"tstring",61:"tchar",62:"tdouble",63:",",64:"+",65:"-",66:"*",67:"/",68:"%",69:"^",70:"==",71:"!=",72:"<=",73:">=",74:"&&",75:"||",76:"decimal",77:"caracter",78:"cadena",79:"ttrue",80:"tfalse"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[19,11],[18,10],[18,8],[10,4],[10,2],[21,4],[21,7],[21,7],[38,4],[40,4],[42,4],[44,4],[46,4],[14,5],[14,6],[49,2],[49,2],[20,9],[20,9],[20,10],[20,10],[16,5],[17,6],[13,6],[13,6],[13,5],[13,5],[24,1],[24,1],[24,1],[24,1],[24,1],[56,4],[56,2],[32,3],[32,1],[15,4],[15,3],[12,2],[12,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,4],[33,6],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1]];
    table: Array<StateType> = [{2:$V0,3:1,4:2,6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V1,24:16,26:$V2,48:$V3,51:$V4,54:$V5,55:$V6,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{1:[3]},{2:$V0,5:[1,29],6:30,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V1,24:16,26:$V2,48:$V3,51:$V4,54:$V5,55:$V6,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($Vd,[2,3]),{11:[1,31]},{11:[1,32]},o($Vd,[2,8]),o($Vd,[2,9]),{11:[1,33]},o($Vd,[2,11]),{11:[1,34]},{11:[1,35]},{11:[1,36]},o($Vd,[2,15]),o($Vd,[2,16]),o($Vd,[2,17]),{26:[1,37],29:[1,38]},{27:$Ve,29:$Vf,34:$Vg,36:$Vh,52:$Vi,53:$Vj},{26:[1,45]},{36:[1,46]},{36:[1,47]},{7:48,8:$Vk},{23:[1,50]},{36:[1,51]},o($Vl,[2,45]),o($Vl,[2,46]),o($Vl,[2,47]),o($Vl,[2,48]),o($Vl,[2,49]),{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,10]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),{11:$Vm,27:$Vn,36:[1,53]},{30:[1,54]},o($Vo,[2,56]),o($Vo,[2,57]),{12:63,15:67,26:$Vp,31:$Vq,32:55,33:57,36:$Vr,37:[1,56],38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:79,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{31:[1,80]},{35:[1,81]},{36:[1,82]},{12:63,15:67,26:$Vp,31:$Vq,33:83,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:84,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{54:[1,85]},{2:$V0,4:86,6:3,9:[1,87],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V1,24:16,26:$V2,48:$V3,51:$V4,54:$V5,55:$V6,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{24:88,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{10:90,21:89,24:92,26:[1,91],58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{12:63,15:67,26:$Vp,31:$Vq,33:93,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{24:96,37:[1,95],56:94,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{26:[1,97]},{37:[1,98],63:$VD},o($Vo,[2,55]),o($VE,[2,53],{23:$VF,25:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS}),o($Vo,[2,64]),o($Vo,[2,65]),o($Vo,[2,66]),o($Vo,[2,67]),o($Vo,[2,68]),o($Vo,[2,69]),{12:63,15:67,26:$Vp,31:$Vq,33:114,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:115,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},o($Vo,[2,82],{29:[1,116],36:$Vh,52:$Vi,53:$Vj}),o($Vo,[2,83]),o($Vo,[2,84]),o($Vo,[2,85]),o($Vo,[2,86]),o($Vo,[2,87]),o($Vo,[2,88]),o($Vo,[2,89]),{36:[1,117]},{36:[1,118]},{36:[1,119]},{36:[1,120]},{36:[1,121]},{11:[1,122],23:$VF,25:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{30:[1,123]},{36:[1,124]},{24:96,37:[1,126],56:125,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{23:$VF,25:$VG,37:[1,127],64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{23:$VF,25:$VG,37:[1,128],64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{36:[1,129]},{2:$V0,6:30,9:[1,130],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V1,24:16,26:$V2,48:$V3,51:$V4,54:$V5,55:$V6,57:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($VT,[2,5]),{25:[1,131]},{12:63,15:67,26:$Vp,31:$Vq,33:132,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{11:[1,133]},{27:$Ve,29:$Vf,34:$Vg},{26:[1,134]},{11:[2,21],23:$VF,25:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{37:[1,135],63:$VU},{7:137,8:$Vk},{26:[1,138]},{27:[1,139]},o($Vo,[2,54]),{12:63,15:67,26:$Vp,31:$Vq,33:140,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:141,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:142,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:143,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:144,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:145,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:146,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:147,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:148,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:149,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:150,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:151,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:152,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:153,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:154,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},o($Vo,[2,70]),{23:$VF,25:$VG,37:[1,155],64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{29:[1,157],31:[1,156]},{12:63,15:67,26:$Vp,31:$Vq,33:158,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:159,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:160,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:161,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{12:63,15:67,26:$Vp,31:$Vq,33:162,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},o($VV,[2,23]),{27:[1,163]},{12:63,15:67,26:$Vp,31:$Vq,33:164,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{37:[1,165],63:$VU},{7:166,8:$Vk},{7:167,8:$Vk},{7:168,8:$Vk},{12:63,15:67,26:$Vp,31:$Vq,33:169,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},o($VT,[2,4]),{26:[1,170]},{11:[1,171],23:$VF,25:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{12:63,15:67,26:$Vp,31:$Vq,33:172,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{11:$Vm,27:$Vn},{7:173,8:$Vk},{24:174,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($Vd,[2,43]),o($VW,[2,51]),{8:[1,176],28:[1,175]},o($VE,[2,52],{23:$VF,25:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS}),o($VX,[2,58],{66:$VJ,67:$VK,68:$VL}),o($VX,[2,59],{66:$VJ,67:$VK,68:$VL}),o($Vo,[2,60]),o($Vo,[2,61]),o($Vo,[2,62]),o([9,11,37,63,69],[2,63],{23:$VF,25:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS}),o($VY,[2,72],{23:$VF,25:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,72:$VP,73:$VQ}),o($VY,[2,73],{23:$VF,25:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,72:$VP,73:$VQ}),o($VZ,[2,74],{64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL}),o($VZ,[2,75],{64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL}),o($VZ,[2,76],{64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL}),o($VZ,[2,77],{64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL}),o([9,11,37,63,69,74,75],[2,78],{23:$VF,25:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,70:$VN,71:$VO,72:$VP,73:$VQ}),o([9,11,37,63,69,75],[2,79],{23:$VF,25:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}),o($Vo,[2,71]),{30:[1,177]},{31:[1,178]},{23:$VF,25:$VG,37:[1,179],64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{23:$VF,25:$VG,37:[1,180],64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{23:$VF,25:$VG,37:[1,181],64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{23:$VF,25:$VG,37:[1,182],64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{23:$VF,25:$VG,37:[1,183],64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{12:63,15:67,26:$Vp,31:$Vq,33:184,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{23:$VF,25:$VG,37:[1,185],64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{7:186,8:$Vk},o($Vd,[2,44]),o($Vd,[2,31],{49:187,50:[1,188]}),o($Vd,[2,39]),{23:$VF,25:$VG,37:[1,189],64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{27:[1,190]},{26:[1,191]},{11:[1,192],23:$VF,25:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},o($Vd,[2,41]),{26:[1,193]},{24:194,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{12:63,15:67,26:$Vp,31:$Vq,32:195,33:57,36:$Vr,38:58,39:$Vs,40:59,41:$Vt,42:62,43:$Vu,44:60,45:$Vv,46:61,47:$Vw,65:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},o($Vo,[2,80]),{30:[1,196]},o($Vo,[2,26]),o($Vo,[2,27]),o($Vo,[2,29]),o($Vo,[2,30]),o($Vo,[2,28]),{11:[1,197],23:$VF,25:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS},{11:[1,198]},o($Vd,[2,42]),o($Vd,[2,32]),{7:200,8:$Vk,14:199,48:$V3},{11:[2,40]},{28:[1,201]},{52:[1,202],53:[1,203]},{26:[1,204]},o($VW,[2,50]),{29:[1,205]},{9:[1,206],63:$VD},{30:[1,207]},o($VV,[2,24]),o($VV,[2,25]),o($Vd,[2,33]),o($Vd,[2,34]),{22:[1,208]},{37:[1,209]},{37:[1,210]},{52:[1,212],53:[1,211]},{31:[1,213]},{11:[2,20]},o($Vo,[2,81]),{23:[1,214]},{7:215,8:$Vk},{7:216,8:$Vk},{37:[1,217]},{37:[1,218]},{30:[1,219]},{24:220,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($Vd,[2,35]),o($Vd,[2,36]),{7:221,8:$Vk},{7:222,8:$Vk},{11:[2,19]},{25:[1,223]},o($Vd,[2,37]),o($Vd,[2,38]),{11:[2,18]}];
    defaultActions: {[key:number]: any} = {29:[2,1],189:[2,40],206:[2,20],219:[2,19],223:[2,18]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

        console.log("Parse de Jison entrada: OK ");
        let raiz = new Raiz($$[$0-1]);
        this.$ = raiz;
        return raiz;
    
break;
case 2:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 3:

                let lstsent = [];
                lstsent.push($$[$0]);
                this.$ = lstsent;
            
break;
case 4:

                       this.$ = $$[$0-1];
                
break;
case 5:

                        this.$ = [];
                
break;
case 6: case 7: case 10: case 12: case 13: case 14:
 this.$ = $$[$0-1]; 
break;
case 8: case 9: case 11: case 15: case 16: case 83:
 this.$ = $$[$0]; 
break;
case 17:
  Err.agregarALista("Error de analisis : "+yytext,"syntax error",this._$.first_line,this._$.first_column) ;
                
break;
case 18:

                let lista = [];
                this.$ = new DeclararLista($$[$0-8],$$[$0-6],$$[$0-1],0,lista,true,_$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 19:

                let vector = [];
                this.$ = new DeclararVector($$[$0-9],$$[$0-6],$$[$0-3],$$[$0-1],vector,true,_$[$0-6].first_line, _$[$0-6].first_column);
                
            
break;
case 20:

                this.$ = new DeclararVector($$[$0-7],$$[$0-4],$$[$0-7],$$[$0-1].length,$$[$0-1],false,_$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 21:

                this.$ = new DeclararVariable($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 22:

                this.$ = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column);
            
break;
case 23:

                this.$ = new Asignacion($$[$0-3], $$[$0-1], 0, false, false, _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 24:

                this.$ = new Asignacion($$[$0-6], $$[$0-1], $$[$0-4], true, _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 25:

                this.$ = new Asignacion($$[$0-6], $$[$0-2], 0, false, true, _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 26:

            this.$ = new toLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 27:

            this.$ = new toUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 28:

            this.$ = new toString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 29:

            this.$ = new Length ($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 30:

            this.$ = new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 31:

            this.$ = new If($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 32:

            this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 33:

            let else_sent = [];
            else_sent.push($$[$0]);
            this.$ = else_sent;
        
break;
case 34:

            this.$ = $$[$0];
        
break;
case 35: case 36:

            this.$ = new For($$[$0-3], $$[$0-5], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
        
break;
case 37:

             this.$ = new For($$[$0-3], $$[$0-5], $$[$0-2], $$[$0], _$[$0-9].first_line, _$[$0-9].first_column );
        
break;
case 38:

             this.$ = new For($$[$0-3], $$[$0-5],$$[$0-2],$$[$0], _$[$0-9].first_line, _$[$0-9].first_column );
        
break;
case 39:

            this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
        
break;
case 40:

            this.$ = new DoWhile($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column );
        
break;
case 41:

                this.$ = new DeclararFuncion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 42:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 43:

                this.$ = new DeclararFuncion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 44:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 45:
 this.$ = new Tipo(TipoPrimitivo.Integer); 
break;
case 46:
 this.$ = new Tipo(TipoPrimitivo.Boolean); 
break;
case 47:
 this.$ = new Tipo(TipoPrimitivo.String);  
break;
case 48:
 this.$ = new Tipo(TipoPrimitivo.Char);    
break;
case 49:
 this.$ = new Tipo(TipoPrimitivo.Double);  
break;
case 50:

                $$[$0-3].push( new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-3].first_line, _$[$0-3].first_column) );
                this.$ = $$[$0-3];
            
break;
case 51:

                let decla1 = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
                let params = [];
                params.push(decla1);
                this.$ = params;
            
break;
case 52:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 53:
 
            let lista_exp = [];
            lista_exp.push($$[$0]);
            this.$ = lista_exp;
        
break;
case 54:
 
                    this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
                
break;
case 55:

                    this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
                
break;
case 56:

                        this.$ = new Inc_dec($$[$0-1],$$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
                     
break;
case 57:

                        this.$ = new Inc_dec($$[$0-1],$$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
                    
break;
case 58: case 59: case 60: case 61: case 62: case 63:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 64: case 65: case 66: case 67: case 68: case 69:
 this.$ = $$[$0];
break;
case 70:
 this.$ = new OperacionAritmetica(new Valor(0, "integer", _$[$0-1].first_line, _$[$0-1].first_column), $$[$0-1], $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 71:
 this.$ = $$[$0-1];
break;
case 72: case 73: case 74: case 75: case 76: case 77:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 78: case 79:
 this.$ = new OperacionLogica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 80:
 this.$ = new AccesoVariable($$[$0-3],$$[$0-1], true, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 81:
 this.$ = new AccesoVariable($$[$0-5],$$[$0-2], true, _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 82:
 this.$ = new AccesoVariable($$[$0],0, false, _$[$0].first_line, _$[$0].first_column);
break;
case 84:
 this.$ = new Valor($$[$0], "integer", new Tipo(TipoPrimitivo.Integer), _$[$0].first_line, _$[$0].first_column);
break;
case 85:
 this.$ = new Valor($$[$0], "double", new Tipo(TipoPrimitivo.Double), _$[$0].first_line, _$[$0].first_column); 
break;
case 86:
 this.$ = new Valor($$[$0], "char", this.$ = new Tipo(TipoPrimitivo.Char), _$[$0].first_line, _$[$0].first_column);   
break;
case 87:
 this.$ = new Valor($$[$0], "string", this.$ = new Tipo(TipoPrimitivo.String), _$[$0].first_line, _$[$0].first_column); 
break;
case 88:
 this.$ = new Valor($$[$0], "true", this.$ = new Tipo(TipoPrimitivo.Boolean), _$[$0].first_line, _$[$0].first_column);   
break;
case 89:
 this.$ = new Valor($$[$0], "false", this.$ = new Tipo(TipoPrimitivo.Boolean), _$[$0].first_line, _$[$0].first_column);  
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */

export class ParserLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Parser"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:$)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:String\b)/i,/^(?:char\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:toString\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:return 5;
      break;
    case 2:/* IGNORE */
      break;
    case 3:/* IGNORE */
      break;
    case 4:   return 79;     
      break;
    case 5:   return 80;    
      break;
    case 6:   return 58;  
      break;
    case 7:   return 59;  
      break;
    case 8:   return 62;   
      break;
    case 9:   return 60;   
      break;
    case 10:   return 61;     
      break;
    case 11:   return 48;       
      break;
    case 12:   return 54;    
      break;
    case 13:   return 55;       
      break;
    case 14:   return 50;     
      break;
    case 15:   return 57;     
      break;
    case 16:   return 'treturn';   
      break;
    case 17:   return 39;  
      break;
    case 18:   return 41;  
      break;
    case 19:   return 43; 
      break;
    case 20:   return 45;  
      break;
    case 21:   return 47;  
      break;
    case 22:   return 51;      
      break;
    case 23:   return 28;      
      break;
    case 24:   return 22;     
      break;
    case 25:   return 35;      
      break;
    case 26:yy_.yytext = yy_.yytext.toLowerCase();          return 26;
      break;
    case 27:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 78;
      break;
    case 28:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 77
      break;
    case 29:return 76
      break;
    case 30:return 31
      break;
    case 31:return '$'
      break;
    case 32:return 52;
      break;
    case 33:return 53;
      break;
    case 34:return 64;
      break;
    case 35:return 65;
      break;
    case 36:return 66;
      break;
    case 37:return 67;
      break;
    case 38:return 68;
      break;
    case 39:return 69;
      break;
    case 40:return 36;
      break;
    case 41:return 37;
      break;
    case 42:return 70;
      break;
    case 43:return 27;
      break;
    case 44:return 63;
      break;
    case 45:return ':';
      break;
    case 46:return 11;
      break;
    case 47:return 75;
      break;
    case 48:return 74;
      break;
    case 49:return 71;
      break;
    case 50:return '!';
      break;
    case 51:return 72;
      break;
    case 52:return 73;
      break;
    case 53:return 25;
      break;
    case 54:return 23;
      break;
    case 55:return 8;
      break;
    case 56:return 9;
      break;
    case 57:return 29;
      break;
    case 58:return 30;
      break;
    case 59:return 34;
      break;
    case 60:
    {
        Err.agregarALista("Carácter desconocido: ",+yy_.yytext," error léxico",yy_.yylloc.first_line,yy_.yylloc.first_column);
    }

      break;
        }
    }
}

