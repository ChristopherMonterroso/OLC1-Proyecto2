/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,12],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[5,9,19,26,29,30,32,33,34,35,36],$Va=[1,29],$Vb=[1,33],$Vc=[1,40],$Vd=[1,39],$Ve=[1,38],$Vf=[1,42],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[1,46],$Vk=[1,47],$Vl=[1,65],$Vm=[1,66],$Vn=[1,67],$Vo=[1,68],$Vp=[1,69],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[11,25,37,39,40,41,42,43,44,45,46,47,48,49,50,51],$Vz=[25,37],$VA=[5,9,19,26,28,29,30,32,33,34,35,36],$VB=[1,88],$VC=[11,25,37,39,40,44,45,46,47,48,49,50,51],$VD=[11,25,37,44,45,50,51],$VE=[11,25,37,44,45,46,47,48,49,50,51];

    let Raiz                        =   require("../Entorno/Raiz").Raiz;
    let Tipo                        =   require("../Entorno/Simbolos/Tipo").Tipo;
    let TipoPrimitivo               =   require("../Entorno/Simbolos/TipoPrimitivo").TipoPrimitivo;
    let DeclararVariable            =   require("../Instrucciones/DeclararVariable").DeclararVariable; 
    let DeclararFuncion             =   require("../Instrucciones/DeclararFuncion").DeclararFuncion;
    let Asignacion                  =   require("../Instrucciones/Asignacion").Asignacion;
    let If                          =   require("../Instrucciones/If").If;
    let Parametro                   =   require("../Instrucciones/Parametro").Parametro;
    let AccesoVariable              =   require("../Expresiones/AccesoVariable").AccesoVariable;
    let LlamadaFuncion              =   require("../Expresiones/LlamadaFuncion").LlamadaFuncion;
    let OperacionAritmetica         =   require("../Expresiones/OperacionAritmetica").OperacionAritmetica;
    let OperacionLogica             =   require("../Expresiones/OperacionLogica").OperacionLogica;
    let OperacionRelacional         =   require("../Expresiones/OperacionRelacional").OperacionRelacional;
    let While                       =   require("../Instrucciones/While").While;
    let Valor                       =   require("../Expresiones/Valor").Valor;
    let toLower                     =   require("../Instrucciones/toLower").toLower;

export class ParserParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new ParserLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"FUNCION":12,"ASIGNACION":13,"IF":14,"LLAMADA_FUNCION":15,"WHILE":16,"DO":17,"TIPO":18,"id":19,"=":20,"EXP":21,"TOLOWER":22,"ttolower":23,"(":24,")":25,"tif":26,"ELSE":27,"telse":28,"twhile":29,"tdo":30,"LISTA_PARAM":31,"tvoid":32,"tinteger":33,"tboolean":34,"tstring":35,"tdouble":36,",":37,"LISTA_EXP":38,"+":39,"-":40,"*":41,"/":42,"%":43,"==":44,"!=":45,"<":46,">":47,"<=":48,">=":49,"&&":50,"||":51,"entero":52,"decimal":53,"caracter":54,"cadena":55,"ttrue":56,"tfalse":57,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:"{",9:"}",11:";",19:"id",20:"=",23:"ttolower",24:"(",25:")",26:"tif",28:"telse",29:"twhile",30:"tdo",32:"tvoid",33:"tinteger",34:"tboolean",35:"tstring",36:"tdouble",37:",",39:"+",40:"-",41:"*",42:"/",43:"%",44:"==",45:"!=",46:"<",47:">",48:"<=",49:">=",50:"&&",51:"||",52:"entero",53:"decimal",54:"caracter",55:"cadena",56:"ttrue",57:"tfalse"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[10,4],[10,2],[10,4],[22,4],[13,4],[14,5],[14,6],[27,2],[27,2],[16,5],[17,6],[12,6],[12,6],[12,5],[12,5],[18,1],[18,1],[18,1],[18,1],[31,4],[31,2],[38,3],[38,1],[15,4],[15,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:$V0,26:$V1,29:$V2,30:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8},{1:[3]},{5:[1,21],6:22,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:$V0,26:$V1,29:$V2,30:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8},o($V9,[2,3]),{11:[1,23]},o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),{11:[1,24]},o($V9,[2,11]),{11:[1,25]},{19:[1,26]},{19:[1,27]},{20:[1,28],24:$Va},{24:[1,30]},{24:[1,31]},{7:32,8:$Vb},{19:[2,28]},{19:[2,29]},{19:[2,30]},{19:[2,31]},{1:[2,1]},o($V9,[2,2]),o($V9,[2,6]),o($V9,[2,10]),o($V9,[2,12]),{11:[2,14],20:[1,34],24:[1,35]},{24:[1,36]},{15:41,19:$Vc,21:37,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:50,24:$Vd,25:[1,49],38:48,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:51,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:52,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{29:[1,53]},{4:54,6:3,9:[1,55],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:$V0,26:$V1,29:$V2,30:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8},{15:41,19:$Vc,21:56,22:57,23:[1,58],24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{18:61,25:[1,60],31:59,33:$V5,34:$V6,35:$V7,36:$V8},{18:61,25:[1,63],31:62,33:$V5,34:$V6,35:$V7,36:$V8},{11:[1,64],39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx},{15:41,19:$Vc,21:78,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:79,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},o($Vy,[2,53],{24:$Va}),o($Vy,[2,54]),o($Vy,[2,55]),o($Vy,[2,56]),o($Vy,[2,57]),o($Vy,[2,58]),o($Vy,[2,59]),o($Vy,[2,60]),{25:[1,80],37:[1,81]},o($Vy,[2,37]),o($Vz,[2,35],{39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx}),{25:[1,82],39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx},{25:[1,83],39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx},{24:[1,84]},{6:22,9:[1,85],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:$V0,26:$V1,29:$V2,30:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8},o($VA,[2,5]),{11:[2,13],39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx},{11:[2,15]},{24:[1,86]},{25:[1,87],37:$VB},{7:89,8:$Vb},{19:[1,90]},{25:[1,91],37:$VB},{7:92,8:$Vb},o($V9,[2,17]),{15:41,19:$Vc,21:93,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:94,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:95,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:96,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:97,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:98,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:99,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:100,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:101,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:102,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:103,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:104,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{15:41,19:$Vc,21:105,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},o($Vy,[2,43]),{25:[1,106],39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx},o($Vy,[2,36]),{15:41,19:$Vc,21:107,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{7:108,8:$Vb},{7:109,8:$Vb},{15:41,19:$Vc,21:110,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},o($VA,[2,4]),{15:41,19:$Vc,21:111,24:$Vd,40:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk},{7:112,8:$Vb},{18:113,33:$V5,34:$V6,35:$V7,36:$V8},o($V9,[2,26]),o($Vz,[2,33]),{7:114,8:$Vb},o($V9,[2,27]),o($VC,[2,38],{41:$Vn,42:$Vo,43:$Vp}),o($VC,[2,39],{41:$Vn,42:$Vo,43:$Vp}),o($Vy,[2,40]),o($Vy,[2,41]),o($Vy,[2,42]),o($VD,[2,45],{39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,46:$Vs,47:$Vt,48:$Vu,49:$Vv}),o($VD,[2,46],{39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,46:$Vs,47:$Vt,48:$Vu,49:$Vv}),o($VE,[2,47],{39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp}),o($VE,[2,48],{39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp}),o($VE,[2,49],{39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp}),o($VE,[2,50],{39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp}),o([11,25,37,50,51],[2,51],{39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv}),o([11,25,37,51],[2,52],{39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw}),o($Vy,[2,44]),o($Vz,[2,34],{39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx}),o($V9,[2,18],{27:115,28:[1,116]}),o($V9,[2,22]),{25:[1,117],39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx},{25:[1,118],39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx},o($V9,[2,24]),{19:[1,119]},o($V9,[2,25]),o($V9,[2,19]),{7:121,8:$Vb,14:120,26:$V1},{11:[2,23]},{11:[2,16]},o($Vz,[2,32]),o($V9,[2,20]),o($V9,[2,21])];
    defaultActions: {[key:number]: any} = {17:[2,28],18:[2,29],19:[2,30],20:[2,31],21:[2,1],57:[2,15],117:[2,23],118:[2,16]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

        console.log("Parse de Jison entrada: OK ");
        let raiz = new Raiz($$[$0-1]);
        this.$ = raiz;
        return raiz;
    
break;
case 2:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 3:

                let lstsent = [];
                lstsent.push($$[$0]);
                this.$ = lstsent;
            
break;
case 4:

                       this.$ = $$[$0-1];
                
break;
case 5:

                        this.$ = [];
                
break;
case 6: case 10: case 12:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 9: case 11: case 54:
 this.$ = $$[$0]; 
break;
case 13:

                this.$ = new DeclararVariable($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 14:

                this.$ = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column);
            
break;
case 15:

               this.$ = new DeclararVariable($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 16:

            this.$ = new toLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 17:

                this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 18:

            this.$ = new If($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 19:

            this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 20:

            let else_sent = [];
            else_sent.push($$[$0]);
            this.$ = else_sent;
        
break;
case 21:

            this.$ = $$[$0];
        
break;
case 22:

            this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
        
break;
case 23:

            this.$ = new While($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column );
        
break;
case 24:

                this.$ = new DeclararFuncion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 25:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 26:

                this.$ = new DeclararFuncion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 27:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 28:
 this.$ = new Tipo(TipoPrimitivo.Integer); 
break;
case 29:
 this.$ = new Tipo(TipoPrimitivo.Boolean); 
break;
case 30:
 this.$ = new Tipo(TipoPrimitivo.String);  
break;
case 31:
 this.$ = new Tipo(TipoPrimitivo.Double);  
break;
case 32:

                $$[$0-3].push( new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-3].first_line, _$[$0-3].first_column) );
                this.$ = $$[$0-3];
            
break;
case 33:

                let decla1 = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
                let params = [];
                params.push(decla1);
                this.$ = params;
            
break;
case 34:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 35:
 
            let lista_exp = [];
            lista_exp.push($$[$0]);
            this.$ = lista_exp;
        
break;
case 36:
 
                    this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
                
break;
case 37:

                    this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
                
break;
case 38: case 39: case 40: case 41: case 42:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 43:
 this.$ = new OperacionAritmetica(new Valor(0, "integer", _$[$0-1].first_line, _$[$0-1].first_column), $$[$0-1], $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 44:
 this.$ = $$[$0-1];
break;
case 45: case 46: case 47: case 48: case 49: case 50:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 51: case 52:
 this.$ = new OperacionLogica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 53:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);        
break;
case 55:
 this.$ = new Valor($$[$0], "integer", _$[$0].first_line, _$[$0].first_column); 
break;
case 56:
 this.$ = new Valor($$[$0], "double", _$[$0].first_line, _$[$0].first_column); 
break;
case 57:
 this.$ = new Valor($$[$0], "char", _$[$0].first_line, _$[$0].first_column);   
break;
case 58:
 this.$ = new Valor($$[$0], "string", _$[$0].first_line, _$[$0].first_column); 
break;
case 59:
 this.$ = new Valor($$[$0], "true", _$[$0].first_line, _$[$0].first_column);   
break;
case 60:
 this.$ = new Valor($$[$0], "false", _$[$0].first_line, _$[$0].first_column);  
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */

export class ParserLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Parser"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:$)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:String\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:toLower\b)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:return 5;
      break;
    case 2:/* IGNORE */
      break;
    case 3:/* IGNORE */
      break;
    case 4:   return 56;     
      break;
    case 5:   return 57;    
      break;
    case 6:   return 33;  
      break;
    case 7:   return 34;  
      break;
    case 8:   return 36;   
      break;
    case 9:   return 35;   
      break;
    case 10:   return 26;       
      break;
    case 11:   return 29;    
      break;
    case 12:   return 30;    
      break;
    case 13:   return 28;     
      break;
    case 14:   return 32;     
      break;
    case 15:   return 'treturn';   
      break;
    case 16:   return 23;   
      break;
    case 17:yy_.yytext = yy_.yytext.toLowerCase();          return 19;
      break;
    case 18:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 55;
      break;
    case 19:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 54
      break;
    case 20:return 53
      break;
    case 21:return 52
      break;
    case 22:return '$'
      break;
    case 23:return '++';
      break;
    case 24:return '--';
      break;
    case 25:return 39;
      break;
    case 26:return 40;
      break;
    case 27:return 41;
      break;
    case 28:return 42;
      break;
    case 29:return 43;
      break;
    case 30:return 24;
      break;
    case 31:return 25;
      break;
    case 32:return 44;
      break;
    case 33:return 20;
      break;
    case 34:return 37;
      break;
    case 35:return ':';
      break;
    case 36:return 11;
      break;
    case 37:return 51;
      break;
    case 38:return 50;
      break;
    case 39:return 45;
      break;
    case 40:return '!';
      break;
    case 41:return 48;
      break;
    case 42:return 49;
      break;
    case 43:return 47;
      break;
    case 44:return 46;
      break;
    case 45:return 8;
      break;
    case 46:return 9;
      break;
    case 47:
      break;
        }
    }
}

