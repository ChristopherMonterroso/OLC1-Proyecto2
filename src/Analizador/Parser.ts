/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,21],$V1=[1,16],$V2=[1,18],$V3=[1,22],$V4=[1,19],$V5=[1,20],$V6=[1,17],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[5,9,22,26,48,51,54,55,57,58,59,60,61,62],$Vd=[1,41],$Ve=[1,42],$Vf=[1,43],$Vg=[1,40],$Vh=[1,38],$Vi=[1,39],$Vj=[1,48],$Vk=[25,26,29],$Vl=[2,21],$Vm=[1,51],$Vn=[9,11,23,25,37,63,64,65,66,67,68,69,70,71,72,73,74,75],$Vo=[1,65],$Vp=[1,67],$Vq=[1,64],$Vr=[1,73],$Vs=[1,74],$Vt=[1,77],$Vu=[1,75],$Vv=[1,76],$Vw=[1,63],$Vx=[1,68],$Vy=[1,69],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[1,98],$VD=[9,37,63],$VE=[1,107],$VF=[1,108],$VG=[1,99],$VH=[1,100],$VI=[1,101],$VJ=[1,102],$VK=[1,103],$VL=[1,104],$VM=[1,105],$VN=[1,106],$VO=[1,109],$VP=[1,110],$VQ=[1,111],$VR=[1,112],$VS=[5,9,22,26,48,50,51,54,55,57,58,59,60,61,62],$VT=[1,135],$VU=[5,9,22,26,31,36,39,41,43,45,47,48,51,54,55,57,58,59,60,61,62,65,76,77,78,79,80],$VV=[37,63],$VW=[9,11,23,25,37,63,64,65,69,70,71,72,73,74,75],$VX=[9,11,37,63,69,70,71,74,75],$VY=[9,11,23,25,37,63,69,70,71,72,73,74,75];


    let Raiz                        =   require("../Entorno/Raiz").Raiz;
    let Tipo                        =   require("../Entorno/Simbolos/Tipo").Tipo;
    let TipoPrimitivo               =   require("../Entorno/Simbolos/TipoPrimitivo").TipoPrimitivo;
    let DeclararVariable            =   require("../Instrucciones/DeclararVariable").DeclararVariable; 
    let DeclararFuncion             =   require("../Instrucciones/DeclararFuncion").DeclararFuncion;
    let Asignacion                  =   require("../Instrucciones/Asignacion").Asignacion;
    let If                          =   require("../Instrucciones/If").If;
    let Parametro                   =   require("../Instrucciones/Parametro").Parametro;
    let AccesoVariable              =   require("../Expresiones/AccesoVariable").AccesoVariable;
    let LlamadaFuncion              =   require("../Expresiones/LlamadaFuncion").LlamadaFuncion;
    let OperacionAritmetica         =   require("../Expresiones/OperacionAritmetica").OperacionAritmetica;
    let OperacionLogica             =   require("../Expresiones/OperacionLogica").OperacionLogica;
    let OperacionRelacional         =   require("../Expresiones/OperacionRelacional").OperacionRelacional;
    let For                       =   require("../Instrucciones/For").For;
    let While                       =   require("../Instrucciones/While").While;
    let DoWhile                     =   require("../Instrucciones/DoWhile").DoWhile;
    let Valor                       =   require("../Expresiones/Valor").Valor;
    let toLower                     =   require("../Instrucciones/toLower").toLower;
    let toString                    =   require("../Instrucciones/toString").toString;
    let toUpper                     =   require("../Instrucciones/toUpper").toUpper;
    let Length                      =   require("../Instrucciones/Length").Length;
    let TypeOf                      =   require("../Instrucciones/TypeOf").TypeOf;
    let DeclararVector              =   require("../Instrucciones/DeclararVector").DeclararVector;
    let DeclararLista               =   require("../Instrucciones/DeclararLista").DeclararLista;
    let Inc_dec                     =   require("../Instrucciones/Incremento_decremento").Incremento_decremento;


export class ParserParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new ParserLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"INCREMENTO_DECREMENTO":12,"FUNCION":13,"IF":14,"LLAMADA_FUNCION":15,"WHILE":16,"DO":17,"VECTOR":18,"LISTA":19,"FOR":20,"ASIGNACION":21,"tlist":22,"<":23,"TIPO":24,">":25,"id":26,"=":27,"tnew":28,"[":29,"]":30,"entero":31,"LISTA_EXP":32,"EXP":33,".":34,"tadd":35,"(":36,")":37,"TOLOWER":38,"ttolower":39,"TOUPPER":40,"ttoupper":41,"TOSTRING":42,"ttoString":43,"LENGTH":44,"ttlength":45,"TYPEOF":46,"tttypeof":47,"tif":48,"ELSE":49,"telse":50,"tfor":51,"++":52,"--":53,"twhile":54,"tdo":55,"LISTA_PARAM":56,"tvoid":57,"tinteger":58,"tboolean":59,"tstring":60,"tchar":61,"tdouble":62,",":63,"+":64,"-":65,"*":66,"/":67,"%":68,"^":69,"==":70,"!=":71,"<=":72,">=":73,"&&":74,"||":75,"decimal":76,"caracter":77,"cadena":78,"ttrue":79,"tfalse":80,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:"{",9:"}",11:";",22:"tlist",23:"<",25:">",26:"id",27:"=",28:"tnew",29:"[",30:"]",31:"entero",34:".",35:"tadd",36:"(",37:")",39:"ttolower",41:"ttoupper",43:"ttoString",45:"ttlength",47:"tttypeof",48:"tif",50:"telse",51:"tfor",52:"++",53:"--",54:"twhile",55:"tdo",57:"tvoid",58:"tinteger",59:"tboolean",60:"tstring",61:"tchar",62:"tdouble",63:",",64:"+",65:"-",66:"*",67:"/",68:"%",69:"^",70:"==",71:"!=",72:"<=",73:">=",74:"&&",75:"||",76:"decimal",77:"caracter",78:"cadena",79:"ttrue",80:"tfalse"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[19,11],[18,10],[18,8],[10,4],[10,2],[21,4],[21,7],[21,7],[38,4],[40,4],[42,4],[44,4],[46,4],[14,5],[14,6],[49,2],[49,2],[20,9],[20,9],[20,10],[20,10],[16,5],[17,6],[13,6],[13,6],[13,5],[13,5],[24,1],[24,1],[24,1],[24,1],[24,1],[56,4],[56,2],[32,3],[32,1],[15,4],[15,3],[12,2],[12,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,4],[33,6],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V0,24:15,26:$V1,48:$V2,51:$V3,54:$V4,55:$V5,57:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb},{1:[3]},{5:[1,28],6:29,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V0,24:15,26:$V1,48:$V2,51:$V3,54:$V4,55:$V5,57:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb},o($Vc,[2,3]),{11:[1,30]},{11:[1,31]},o($Vc,[2,8]),o($Vc,[2,9]),{11:[1,32]},o($Vc,[2,11]),{11:[1,33]},{11:[1,34]},{11:[1,35]},o($Vc,[2,15]),o($Vc,[2,16]),{26:[1,36],29:[1,37]},{27:$Vd,29:$Ve,34:$Vf,36:$Vg,52:$Vh,53:$Vi},{26:[1,44]},{36:[1,45]},{36:[1,46]},{7:47,8:$Vj},{23:[1,49]},{36:[1,50]},o($Vk,[2,44]),o($Vk,[2,45]),o($Vk,[2,46]),o($Vk,[2,47]),o($Vk,[2,48]),{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,10]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),{11:$Vl,27:$Vm,36:[1,52]},{30:[1,53]},o($Vn,[2,55]),o($Vn,[2,56]),{12:62,15:66,26:$Vo,31:$Vp,32:54,33:56,36:$Vq,37:[1,55],38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:78,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{31:[1,79]},{35:[1,80]},{36:[1,81]},{12:62,15:66,26:$Vo,31:$Vp,33:82,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:83,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{54:[1,84]},{4:85,6:3,9:[1,86],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V0,24:15,26:$V1,48:$V2,51:$V3,54:$V4,55:$V5,57:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb},{24:87,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb},{10:89,21:88,24:91,26:[1,90],58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb},{12:62,15:66,26:$Vo,31:$Vp,33:92,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{24:95,37:[1,94],56:93,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb},{26:[1,96]},{37:[1,97],63:$VC},o($Vn,[2,54]),o($VD,[2,52],{23:$VE,25:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),o($Vn,[2,63]),o($Vn,[2,64]),o($Vn,[2,65]),o($Vn,[2,66]),o($Vn,[2,67]),o($Vn,[2,68]),{12:62,15:66,26:$Vo,31:$Vp,33:113,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:114,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},o($Vn,[2,81],{29:[1,115],36:$Vg,52:$Vh,53:$Vi}),o($Vn,[2,82]),o($Vn,[2,83]),o($Vn,[2,84]),o($Vn,[2,85]),o($Vn,[2,86]),o($Vn,[2,87]),o($Vn,[2,88]),{36:[1,116]},{36:[1,117]},{36:[1,118]},{36:[1,119]},{36:[1,120]},{11:[1,121],23:$VE,25:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{30:[1,122]},{36:[1,123]},{24:95,37:[1,125],56:124,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb},{23:$VE,25:$VF,37:[1,126],64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{23:$VE,25:$VF,37:[1,127],64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{36:[1,128]},{6:29,9:[1,129],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V0,24:15,26:$V1,48:$V2,51:$V3,54:$V4,55:$V5,57:$V6,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb},o($VS,[2,5]),{25:[1,130]},{12:62,15:66,26:$Vo,31:$Vp,33:131,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{11:[1,132]},{27:$Vd,29:$Ve,34:$Vf},{26:[1,133]},{11:[2,20],23:$VE,25:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{37:[1,134],63:$VT},{7:136,8:$Vj},{26:[1,137]},{27:[1,138]},o($Vn,[2,53]),{12:62,15:66,26:$Vo,31:$Vp,33:139,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:140,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:141,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:142,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:143,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:144,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:145,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:146,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:147,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:148,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:149,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:150,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:151,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:152,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:153,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},o($Vn,[2,69]),{23:$VE,25:$VF,37:[1,154],64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{29:[1,156],31:[1,155]},{12:62,15:66,26:$Vo,31:$Vp,33:157,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:158,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:159,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:160,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{12:62,15:66,26:$Vo,31:$Vp,33:161,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},o($VU,[2,22]),{27:[1,162]},{12:62,15:66,26:$Vo,31:$Vp,33:163,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{37:[1,164],63:$VT},{7:165,8:$Vj},{7:166,8:$Vj},{7:167,8:$Vj},{12:62,15:66,26:$Vo,31:$Vp,33:168,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},o($VS,[2,4]),{26:[1,169]},{11:[1,170],23:$VE,25:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{12:62,15:66,26:$Vo,31:$Vp,33:171,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{11:$Vl,27:$Vm},{7:172,8:$Vj},{24:173,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb},o($Vc,[2,42]),o($VV,[2,50]),{8:[1,175],28:[1,174]},o($VD,[2,51],{23:$VE,25:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),o($VW,[2,57],{66:$VI,67:$VJ,68:$VK}),o($VW,[2,58],{66:$VI,67:$VJ,68:$VK}),o($Vn,[2,59]),o($Vn,[2,60]),o($Vn,[2,61]),o([9,11,37,63,69],[2,62],{23:$VE,25:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),o($VX,[2,71],{23:$VE,25:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,72:$VO,73:$VP}),o($VX,[2,72],{23:$VE,25:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,72:$VO,73:$VP}),o($VY,[2,73],{64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK}),o($VY,[2,74],{64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK}),o($VY,[2,75],{64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK}),o($VY,[2,76],{64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK}),o([9,11,37,63,69,74,75],[2,77],{23:$VE,25:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VM,71:$VN,72:$VO,73:$VP}),o([9,11,37,63,69,75],[2,78],{23:$VE,25:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ}),o($Vn,[2,70]),{30:[1,176]},{31:[1,177]},{23:$VE,25:$VF,37:[1,178],64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{23:$VE,25:$VF,37:[1,179],64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{23:$VE,25:$VF,37:[1,180],64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{23:$VE,25:$VF,37:[1,181],64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{23:$VE,25:$VF,37:[1,182],64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{12:62,15:66,26:$Vo,31:$Vp,33:183,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},{23:$VE,25:$VF,37:[1,184],64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{7:185,8:$Vj},o($Vc,[2,43]),o($Vc,[2,30],{49:186,50:[1,187]}),o($Vc,[2,38]),{23:$VE,25:$VF,37:[1,188],64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{27:[1,189]},{26:[1,190]},{11:[1,191],23:$VE,25:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($Vc,[2,40]),{26:[1,192]},{24:193,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb},{12:62,15:66,26:$Vo,31:$Vp,32:194,33:56,36:$Vq,38:57,39:$Vr,40:58,41:$Vs,42:61,43:$Vt,44:59,45:$Vu,46:60,47:$Vv,65:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB},o($Vn,[2,79]),{30:[1,195]},o($Vn,[2,25]),o($Vn,[2,26]),o($Vn,[2,28]),o($Vn,[2,29]),o($Vn,[2,27]),{11:[1,196],23:$VE,25:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{11:[1,197]},o($Vc,[2,41]),o($Vc,[2,31]),{7:199,8:$Vj,14:198,48:$V2},{11:[2,39]},{28:[1,200]},{52:[1,201],53:[1,202]},{26:[1,203]},o($VV,[2,49]),{29:[1,204]},{9:[1,205],63:$VC},{30:[1,206]},o($VU,[2,23]),o($VU,[2,24]),o($Vc,[2,32]),o($Vc,[2,33]),{22:[1,207]},{37:[1,208]},{37:[1,209]},{52:[1,211],53:[1,210]},{31:[1,212]},{11:[2,19]},o($Vn,[2,80]),{23:[1,213]},{7:214,8:$Vj},{7:215,8:$Vj},{37:[1,216]},{37:[1,217]},{30:[1,218]},{24:219,58:$V7,59:$V8,60:$V9,61:$Va,62:$Vb},o($Vc,[2,34]),o($Vc,[2,35]),{7:220,8:$Vj},{7:221,8:$Vj},{11:[2,18]},{25:[1,222]},o($Vc,[2,36]),o($Vc,[2,37]),{11:[2,17]}];
    defaultActions: {[key:number]: any} = {28:[2,1],188:[2,39],205:[2,19],218:[2,18],222:[2,17]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

        console.log("Parse de Jison entrada: OK ");
        let raiz = new Raiz($$[$0-1]);
        this.$ = raiz;
        return raiz;
    
break;
case 2:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 3:

                let lstsent = [];
                lstsent.push($$[$0]);
                this.$ = lstsent;
            
break;
case 4:

                       this.$ = $$[$0-1];
                
break;
case 5:

                        this.$ = [];
                
break;
case 6: case 7: case 10: case 12: case 13: case 14:
 this.$ = $$[$0-1]; 
break;
case 8: case 9: case 11: case 15: case 16: case 82:
 this.$ = $$[$0]; 
break;
case 17:

                let lista = [];
                this.$ = new DeclararLista($$[$0-8],$$[$0-6],$$[$0-1],0,lista,true,_$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 18:

                let vector = [];
                this.$ = new DeclararVector($$[$0-9],$$[$0-6],$$[$0-3],$$[$0-1],vector,true,_$[$0-6].first_line, _$[$0-6].first_column);
                
            
break;
case 19:

                this.$ = new DeclararVector($$[$0-7],$$[$0-4],$$[$0-7],$$[$0-1].length,$$[$0-1],false,_$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 20:

                this.$ = new DeclararVariable($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 21:

                this.$ = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column);
            
break;
case 22:

                this.$ = new Asignacion($$[$0-3], $$[$0-1], 0, false, false, _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 23:

                this.$ = new Asignacion($$[$0-6], $$[$0-1], $$[$0-4], true, _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 24:

                this.$ = new Asignacion($$[$0-6], $$[$0-2], 0, false, true, _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 25:

            this.$ = new toLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 26:

            this.$ = new toUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 27:

            this.$ = new toString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 28:

            this.$ = new Length ($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 29:

            this.$ = new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column );
        
break;
case 30:

            this.$ = new If($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 31:

            this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 32:

            let else_sent = [];
            else_sent.push($$[$0]);
            this.$ = else_sent;
        
break;
case 33:

            this.$ = $$[$0];
        
break;
case 34: case 35:

            this.$ = new For($$[$0-3], $$[$0-5], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
        
break;
case 36:

             this.$ = new For($$[$0-3], $$[$0-5], $$[$0-2], $$[$0], _$[$0-9].first_line, _$[$0-9].first_column );
        
break;
case 37:

             this.$ = new For($$[$0-3], $$[$0-5],$$[$0-2],$$[$0], _$[$0-9].first_line, _$[$0-9].first_column );
        
break;
case 38:

            this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
        
break;
case 39:

            this.$ = new DoWhile($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column );
        
break;
case 40:

                this.$ = new DeclararFuncion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 41:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 42:

                this.$ = new DeclararFuncion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 43:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 44:
 this.$ = new Tipo(TipoPrimitivo.Integer); 
break;
case 45:
 this.$ = new Tipo(TipoPrimitivo.Boolean); 
break;
case 46:
 this.$ = new Tipo(TipoPrimitivo.String);  
break;
case 47:
 this.$ = new Tipo(TipoPrimitivo.Char);    
break;
case 48:
 this.$ = new Tipo(TipoPrimitivo.Double);  
break;
case 49:

                $$[$0-3].push( new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-3].first_line, _$[$0-3].first_column) );
                this.$ = $$[$0-3];
            
break;
case 50:

                let decla1 = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
                let params = [];
                params.push(decla1);
                this.$ = params;
            
break;
case 51:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 52:
 
            let lista_exp = [];
            lista_exp.push($$[$0]);
            this.$ = lista_exp;
        
break;
case 53:
 
                    this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
                
break;
case 54:

                    this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
                
break;
case 55:

                        this.$ = new Inc_dec($$[$0-1],$$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
                     
break;
case 56:

                        this.$ = new Inc_dec($$[$0-1],$$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
                    
break;
case 57: case 58: case 59: case 60: case 61: case 62:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 63: case 64: case 65: case 66: case 67: case 68:
 this.$ = $$[$0];
break;
case 69:
 this.$ = new OperacionAritmetica(new Valor(0, "integer", _$[$0-1].first_line, _$[$0-1].first_column), $$[$0-1], $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 70:
 this.$ = $$[$0-1];
break;
case 71: case 72: case 73: case 74: case 75: case 76:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 77: case 78:
 this.$ = new OperacionLogica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 79:
 this.$ = new AccesoVariable($$[$0-3],$$[$0-1], true, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 80:
 this.$ = new AccesoVariable($$[$0-5],$$[$0-2], true, _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 81:
 this.$ = new AccesoVariable($$[$0],0, false, _$[$0].first_line, _$[$0].first_column);
break;
case 83:
 this.$ = new Valor($$[$0], "integer", new Tipo(TipoPrimitivo.Integer), _$[$0].first_line, _$[$0].first_column);
break;
case 84:
 this.$ = new Valor($$[$0], "double", new Tipo(TipoPrimitivo.Double), _$[$0].first_line, _$[$0].first_column); 
break;
case 85:
 this.$ = new Valor($$[$0], "char", this.$ = new Tipo(TipoPrimitivo.Char), _$[$0].first_line, _$[$0].first_column);   
break;
case 86:
 this.$ = new Valor($$[$0], "string", this.$ = new Tipo(TipoPrimitivo.String), _$[$0].first_line, _$[$0].first_column); 
break;
case 87:
 this.$ = new Valor($$[$0], "true", this.$ = new Tipo(TipoPrimitivo.Boolean), _$[$0].first_line, _$[$0].first_column);   
break;
case 88:
 this.$ = new Valor($$[$0], "false", this.$ = new Tipo(TipoPrimitivo.Boolean), _$[$0].first_line, _$[$0].first_column);  
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */

export class ParserLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Parser"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:$)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:String\b)/i,/^(?:char\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:toString\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:return 5;
      break;
    case 2:/* IGNORE */
      break;
    case 3:/* IGNORE */
      break;
    case 4:   return 79;     
      break;
    case 5:   return 80;    
      break;
    case 6:   return 58;  
      break;
    case 7:   return 59;  
      break;
    case 8:   return 62;   
      break;
    case 9:   return 60;   
      break;
    case 10:   return 61;     
      break;
    case 11:   return 48;       
      break;
    case 12:   return 54;    
      break;
    case 13:   return 55;       
      break;
    case 14:   return 50;     
      break;
    case 15:   return 57;     
      break;
    case 16:   return 'treturn';   
      break;
    case 17:   return 39;  
      break;
    case 18:   return 41;  
      break;
    case 19:   return 43; 
      break;
    case 20:   return 45;  
      break;
    case 21:   return 47;  
      break;
    case 22:   return 51;      
      break;
    case 23:   return 28;      
      break;
    case 24:   return 22;     
      break;
    case 25:   return 35;      
      break;
    case 26:yy_.yytext = yy_.yytext.toLowerCase();          return 26;
      break;
    case 27:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 78;
      break;
    case 28:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 77
      break;
    case 29:return 76
      break;
    case 30:return 31
      break;
    case 31:return '$'
      break;
    case 32:return 52;
      break;
    case 33:return 53;
      break;
    case 34:return 64;
      break;
    case 35:return 65;
      break;
    case 36:return 66;
      break;
    case 37:return 67;
      break;
    case 38:return 68;
      break;
    case 39:return 69;
      break;
    case 40:return 36;
      break;
    case 41:return 37;
      break;
    case 42:return 70;
      break;
    case 43:return 27;
      break;
    case 44:return 63;
      break;
    case 45:return ':';
      break;
    case 46:return 11;
      break;
    case 47:return 75;
      break;
    case 48:return 74;
      break;
    case 49:return 71;
      break;
    case 50:return '!';
      break;
    case 51:return 72;
      break;
    case 52:return 73;
      break;
    case 53:return 25;
      break;
    case 54:return 23;
      break;
    case 55:return 8;
      break;
    case 56:return 9;
      break;
    case 57:return 29;
      break;
    case 58:return 30;
      break;
    case 59:return 34;
      break;
        }
    }
}

